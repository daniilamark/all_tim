#Существует только два логических значения - True (выражение истинно) и False (выражение ложно).

"""""
Простейшие условные выражения представляют операции сравнения, которые сравнивают два значения. 
Python поддерживает следующие операции сравнения:
( == ) Возвращает True, если оба операнда равны. Иначе возвращает False.
( != ) Возвращает True, если оба операнда НЕ равны. Иначе возвращает False.
( > ) (больше чем) Возвращает True, если первый операнд больше второго.
( < ) (меньше чем) Возвращает True, если первый операнд меньше второго.
( >= )(больше или равно) Возвращает True, если первый операнд больше или равен второму.
( <= ) (меньше или равно) Возвращает True, если первый операнд меньше или равен второму.

a = 5
b = 6
result = 5 == 6  # сохраняем результат операции в переменную
print(result)  # False - 5 не равно 6
print(a != b)  # True
print(a > b)  # False - 5 меньше 6
print(a < b)  # True

bool1 = True
bool2 = False
print(bool1 == bool2)  # False - bool1 не равно bool2

#Логические операции
#Для создания составных условных выражений применяются логические операции. В Python имеются следующие логические операторы:

{{ and (логическое умножение) Возвращает True, если оба выражения равны True }}


age = 22
weight = 58
result = age > 21 and weight == 58
print(result)  # True


age = 22
weight = 58
isMarried = False
result = age > 21 and weight == 58 and isMarried
print(result)  # False, так как isMarried = False


{{ or (логическое сложение) Возвращает True, если хотя бы одно из выражений равно True }}

age = 22
isMarried = False
result = age > 21 or isMarried
print(result)  # True, так как выражение age > 21 равно True


{{ not (логическое отрицание) Возвращает True, если выражение равно False }}

age = 22
isMarried = False
print(not age > 21)  # False
print(not isMarried)  # True


### Операции со строками


>>> Строка представляет последовательность символов в кодировке Unicode, заключенных в кавычки. 
Причем в Python мы можем использовать как одинарные, так и двойные кавычки:

name = "Tom"
surname = 'Smith'
print(name, surname)  # Tom Smith

>>> Одной из самых распространенных операций со строками является их объединение или конкатенация. 
Для объединения строк применяется знак плюса:

name = "Tom"
surname = 'Smith'
fullname = name + " " + surname
print(fullname)  # Tom Smith


>>> С объединением двух строк все просто, но что, если нам надо сложить строку и число? 
В этом случае необходимо привести число к строке с помощью функции str():

name = "Tom"
age = 33
info = "Name: " + name + " Age: " + str(age)
print(info)  # Name: Tom Age: 33

>>> перевод строки

print("Время пришло в гости отправится\nждет меня старинный друг")


>>>  И чтобы отобразить кавычки (как двойные, так и одинарные) внутри строки, перед ними ставится слеш:
print("Кафе \"Central Perk\"")

>>> Функция lower() приводит строку к нижнему регистру, а функция upper() - к верхнему.



#### Условная конструкция if ####

>>> Условные конструкции используют условные выражения и в зависимости от их значения направляют выполнение программы по одному из путей.

if логическое_выражение:
    инструкции
elif логическое выражение:
    инструкции
else: 
    инструкции
    
!!!
age = 22
if age > 21:
    print("Доступ разрешен")
    print("Завершение работы") # тело конструкции и отступы


>>> альтернативное решение на тот случай, если условное выражение возвратит False, то мы можем использовать блок else:
age = 18
if age > 21:
    print("Доступ разрешен")
else:
    print("Доступ запрещен") 

>>> Если необходимо ввести несколько альтернативных условий, то можно использовать дополнительные блоки elif, после которого идет блок инструкций.

age = 18
if age >= 21:
    print("Доступ разрешен")
elif age >= 18:
    print("Доступ частично разрешен")
else:
    print("Доступ запрещен")
    
>>> Конструкция if в свою очередь сама может иметь вложенные конструкции if:

age = 18
if age >= 18:
    print("Больше 17")
    if age > 21:
        print("Больше 21")
    else:
        print("От 18 до 21")
        


"""""






